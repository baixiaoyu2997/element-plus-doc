import type { TagDoc } from '@/types/tag-doc';
const doc: TagDoc.TagDocInstance = {
  url: '',
  attributes: [
    {
      name: 'append-to',
      description: { cn: 'which element the tooltip CONTENT appends to', en: 'which element the tooltip CONTENT appends to' },
      type: 'cssselector',
      default: '—',
      value: ['HTMLElement'],
    },
    {
      name: 'effect',
      description: {
        cn: 'Tooltip theme, built-in theme: <code>dark</code> / <code>light</code>',
        en: 'Tooltip theme, built-in theme: <code>dark</code> / <code>light</code>',
      },
      type: 'enum',
      default: "'light'`",
      value: ['dark'],
    },
    {
      name: 'content',
      description: {
        cn: 'display content, can be overridden by <code>slot#content</code>',
        en: 'display content, can be overridden by <code>slot#content</code>',
      },
      type: 'string',
      default: "''",
      value: [''],
    },
    {
      name: 'raw-content',
      description: { cn: 'whether <code>content</code> is treated as HTML string', en: 'whether <code>content</code> is treated as HTML string' },
      type: 'boolean',
      default: 'false',
      value: [''],
    },
    {
      name: 'placement',
      description: { cn: 'position of Tooltip', en: 'position of Tooltip' },
      type: 'enum',
      default: "'top-start'",
      value: ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end'],
    },
    {
      name: 'visible / v-model:visible',
      description: { cn: 'visibility of Tooltip', en: 'visibility of Tooltip' },
      type: 'boolean',
      default: '—',
      value: [''],
    },
    { name: 'disabled', description: { cn: 'whether Tooltip is disabled', en: 'whether Tooltip is disabled' }, type: 'boolean', default: '—', value: [''] },
    { name: 'offset', description: { cn: 'offset of the Tooltip', en: 'offset of the Tooltip' }, type: 'number', default: '12', value: [''] },
    { name: 'transition', description: { cn: 'animation name', en: 'animation name' }, type: 'string', default: '—', value: [''] },
    {
      name: 'popper-options',
      description: {
        cn: '<a href="https://popper.js.org/docs/v2/">popper.js</a> parameters',
        en: '<a href="https://popper.js.org/docs/v2/">popper.js</a> parameters',
      },
      type: 'object',
      default: '{}',
      value: ['refertoahrefhttpspopperjsorgdocsv2popperjsadoc'],
    },
    {
      name: 'show-after',
      description: { cn: 'delay of appearance, in millisecond', en: 'delay of appearance, in millisecond' },
      type: 'number',
      default: '0',
      value: [''],
    },
    {
      name: 'show-arrow',
      description: { cn: 'whether the tooltip content has an arrow', en: 'whether the tooltip content has an arrow' },
      type: 'boolean',
      default: 'true',
      value: [''],
    },
    {
      name: 'hide-after',
      description: { cn: 'delay of disappear, in millisecond', en: 'delay of disappear, in millisecond' },
      type: 'number',
      default: '200',
      value: [''],
    },
    {
      name: 'auto-close',
      description: { cn: 'timeout in milliseconds to hide tooltip', en: 'timeout in milliseconds to hide tooltip' },
      type: 'number',
      default: '0',
      value: [''],
    },
    {
      name: 'popper-class',
      description: { cn: "custom class name for Tooltip's popper", en: "custom class name for Tooltip's popper" },
      type: 'string',
      default: '—',
      value: [''],
    },
    {
      name: 'enterable',
      description: { cn: 'whether the mouse can enter the tooltip', en: 'whether the mouse can enter the tooltip' },
      type: 'boolean',
      default: 'true',
      value: [''],
    },
    {
      name: 'teleported',
      description: {
        cn: 'whether tooltip content is teleported, if <code>true</code> it will be teleported to where <code>append-to</code> sets',
        en: 'whether tooltip content is teleported, if <code>true</code> it will be teleported to where <code>append-to</code> sets',
      },
      type: 'boolean',
      default: 'true',
      value: [''],
    },
    {
      name: 'trigger',
      description: { cn: 'How should the tooltip be triggered (to show)', en: 'How should the tooltip be triggered (to show)' },
      type: 'enum',
      default: "'click'",
      value: ['hover'],
    },
    {
      name: 'virtual-triggering',
      description: { cn: 'Indicates whether virtual triggering is enabled', en: 'Indicates whether virtual triggering is enabled' },
      type: 'boolean',
      default: '—',
      value: [''],
    },
    {
      name: 'virtual-ref',
      description: {
        cn: 'Indicates the reference element to which the tooltip is attached',
        en: 'Indicates the reference element to which the tooltip is attached',
      },
      type: 'htmlelement',
      default: '—',
      value: [''],
    },
    {
      name: 'trigger-keys',
      description: {
        cn: 'When you click the mouse to focus on the trigger element, you can define a set of keyboard codes to control the display of tooltip through the keyboard',
        en: 'When you click the mouse to focus on the trigger element, you can define a set of keyboard codes to control the display of tooltip through the keyboard',
      },
      type: 'array',
      default: "['Enter','Space']",
      value: [''],
    },
    {
      name: 'persistent',
      description: {
        cn: 'when tooltip inactive and <code>persistent</code> is <code>false</code> , popconfirm will be destroyed',
        en: 'when tooltip inactive and <code>persistent</code> is <code>false</code> , popconfirm will be destroyed',
      },
      type: 'boolean',
      default: '—',
      value: [''],
    },
    {
      name: 'aria-label^[a11y]',
      description: { cn: 'same as <code>aria-label</code>', en: 'same as <code>aria-label</code>' },
      type: 'string',
      default: '—',
      value: [''],
    },
  ],
  exposes: [
    { name: 'popperRef', description: { cn: 'el-popper component instance', en: 'el-popper component instance' }, type: 'objcet', tsType: '' },
    {
      name: 'contentRef',
      description: { cn: 'el-tooltip-content component instance', en: 'el-tooltip-content component instance' },
      type: 'objcet',
      tsType: '',
    },
    {
      name: 'isFocusInsideContent',
      description: {
        cn: 'validate current focus event is trigger inside el-tooltip-content',
        en: 'validate current focus event is trigger inside el-tooltip-content',
      },
      type: 'function',
      tsType: '',
    },
    {
      name: 'updatePopper',
      description: { cn: 'update el-popper component instance', en: 'update el-popper component instance' },
      type: 'function',
      tsType: '',
    },
    {
      name: 'onOpen',
      description: { cn: 'expose onOpen function to mange el-tooltip open state', en: 'expose onOpen function to mange el-tooltip open state' },
      type: 'function',
      tsType: '',
    },
    {
      name: 'onClose',
      description: { cn: 'expose onOpen function to mange el-tooltip open state', en: 'expose onOpen function to mange el-tooltip open state' },
      type: 'function',
      tsType: '',
    },
    { name: 'hide', description: { cn: 'expose hide function', en: 'expose hide function' }, type: 'function', tsType: '' },
  ],
  slots: [
    { name: 'default', description: { cn: 'Tooltip triggering &amp; reference element', en: 'Tooltip triggering &amp; reference element' } },
    { name: 'content', description: { cn: 'customize content', en: 'customize content' } },
  ],
};
export default doc;
