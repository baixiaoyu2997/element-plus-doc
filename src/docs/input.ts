import type { TagDoc } from '@/types/tag-doc';
const doc: TagDoc.TagDocInstance = {
  url: '',
  attributes: [
    { name: 'type', description: { cn: 'type of input', en: 'type of input' }, type: 'string', default: "'textarea'", value: ['text'] },
    { name: 'model-value / v-model', description: { cn: 'binding value', en: 'binding value' }, type: 'string', default: '—', value: ['number'] },
    { name: 'maxlength', description: { cn: 'the max length', en: 'the max length' }, type: 'string', default: '—', value: ['number'] },
    {
      name: 'minlength',
      description: { cn: 'same as <code>minlength</code> in native input', en: 'same as <code>minlength</code> in native input' },
      type: 'number',
      default: '—',
      value: [],
    },
    {
      name: 'show-word-limit',
      description: {
        cn: "whether show word count, only works when <code>type</code> is 'text' or 'textarea'",
        en: "whether show word count, only works when <code>type</code> is 'text' or 'textarea'",
      },
      type: 'boolean',
      default: 'false',
      value: [],
    },
    { name: 'placeholder', description: { cn: 'placeholder of Input', en: 'placeholder of Input' }, type: 'string', default: '—', value: [] },
    {
      name: 'clearable',
      description: {
        cn: "whether to show clear button, only works when <code>type</code> is not 'textarea'",
        en: "whether to show clear button, only works when <code>type</code> is not 'textarea'",
      },
      type: 'boolean',
      default: 'false',
      value: [],
    },
    {
      name: 'formatter',
      description: {
        cn: "specifies the format of the value presented input.(only works when <code>type</code> is 'text')",
        en: "specifies the format of the value presented input.(only works when <code>type</code> is 'text')",
      },
      type: 'function',
      default: 'number) => string`',
      value: ['valuestring'],
    },
    {
      name: 'parser',
      description: {
        cn: "specifies the value extracted from formatter input.(only works when <code>type</code> is 'text')",
        en: "specifies the value extracted from formatter input.(only works when <code>type</code> is 'text')",
      },
      type: 'function',
      default: '—',
      value: ['codevaluestringgtstringcode'],
    },
    {
      name: 'show-password',
      description: { cn: 'whether to show toggleable password input', en: 'whether to show toggleable password input' },
      type: 'boolean',
      default: 'false',
      value: [],
    },
    { name: 'disabled', description: { cn: 'whether Input is disabled', en: 'whether Input is disabled' }, type: 'boolean', default: 'false', value: [] },
    {
      name: 'size',
      description: { cn: "size of Input, works when <code>type</code> is not 'textarea'", en: "size of Input, works when <code>type</code> is not 'textarea'" },
      type: 'enum',
      default: "'default'",
      value: ['large'],
    },
    { name: 'prefix-icon', description: { cn: 'prefix icon component', en: 'prefix icon component' }, type: 'string', default: '—', value: ['Component'] },
    { name: 'suffix-icon', description: { cn: 'suffix icon component', en: 'suffix icon component' }, type: 'string', default: '—', value: ['Component'] },
    {
      name: 'rows',
      description: {
        cn: "number of rows of textarea, only works when <code>type</code> is 'textarea'",
        en: "number of rows of textarea, only works when <code>type</code> is 'textarea'",
      },
      type: 'number',
      default: '2',
      value: [],
    },
    {
      name: 'autosize',
      description: {
        cn: "whether textarea has an adaptive height, only works when <code>type</code> is 'textarea'. Can accept an object, e.g. <code>{ minRows: 2, maxRows: 6 }</code>",
        en: "whether textarea has an adaptive height, only works when <code>type</code> is 'textarea'. Can accept an object, e.g. <code>{ minRows: 2, maxRows: 6 }</code>",
      },
      type: 'boolean',
      default: 'false',
      value: ['object'],
    },
    {
      name: 'autocomplete',
      description: { cn: 'same as <code>autocomplete</code> in native input', en: 'same as <code>autocomplete</code> in native input' },
      type: 'string',
      default: 'off',
      value: [],
    },
    {
      name: 'name',
      description: { cn: 'same as <code>name</code> in native input', en: 'same as <code>name</code> in native input' },
      type: 'string',
      default: '—',
      value: [],
    },
    {
      name: 'readonly',
      description: { cn: 'same as <code>readonly</code> in native input', en: 'same as <code>readonly</code> in native input' },
      type: 'boolean',
      default: 'false',
      value: [],
    },
    {
      name: 'max',
      description: { cn: 'same as <code>max</code> in native input', en: 'same as <code>max</code> in native input' },
      type: '—',
      default: '—',
      value: [],
    },
    {
      name: 'min',
      description: { cn: 'same as <code>min</code> in native input', en: 'same as <code>min</code> in native input' },
      type: '—',
      default: '—',
      value: [],
    },
    {
      name: 'step',
      description: { cn: 'same as <code>step</code> in native input', en: 'same as <code>step</code> in native input' },
      type: '—',
      default: '—',
      value: [],
    },
    { name: 'resize', description: { cn: 'control the resizability', en: 'control the resizability' }, type: 'enum', default: "'both'", value: ['none'] },
    {
      name: 'autofocus',
      description: { cn: 'same as <code>autofocus</code> in native input', en: 'same as <code>autofocus</code> in native input' },
      type: 'boolean',
      default: 'false',
      value: [],
    },
    {
      name: 'form',
      description: { cn: 'same as <code>form</code> in native input', en: 'same as <code>form</code> in native input' },
      type: '<code>string</code>',
      default: '—',
      value: [],
    },
    {
      name: 'label<a11ytag></a11ytag>',
      description: { cn: 'same as <code>aria-label</code> in native input', en: 'same as <code>aria-label</code> in native input' },
      type: 'string',
      default: '—',
      value: [],
    },
    { name: 'tabindex', description: { cn: 'input tabindex', en: 'input tabindex' }, type: 'string', default: '—', value: ['number'] },
    {
      name: 'validate-event',
      description: { cn: 'whether to trigger form validation', en: 'whether to trigger form validation' },
      type: 'boolean',
      default: 'true',
      value: [],
    },
    {
      name: 'input-style',
      description: { cn: 'the style of the input element or textarea element', en: 'the style of the input element or textarea element' },
      type: 'string',
      default: 'CSSProperties[]',
      value: ['object'],
    },
  ],
  events: [
    { name: 'blur', description: { cn: 'triggers when Input blurs', en: 'triggers when Input blurs' }, type: 'function', param: '' },
    { name: 'focus', description: { cn: 'triggers when Input focuses', en: 'triggers when Input focuses' }, type: 'function', param: '' },
    {
      name: 'change',
      description: {
        cn: 'triggers when the input box loses focus or the user presses Enter, only if the modelValue has changed',
        en: 'triggers when the input box loses focus or the user presses Enter, only if the modelValue has changed',
      },
      type: 'function',
      param: '',
    },
    { name: 'input', description: { cn: 'triggers when the Input value change', en: 'triggers when the Input value change' }, type: 'function', param: '' },
    {
      name: 'clear',
      description: {
        cn: 'triggers when the Input is cleared by clicking the clear button',
        en: 'triggers when the Input is cleared by clicking the clear button',
      },
      type: 'function',
      param: '',
    },
  ],
  exposes: [
    { name: 'blur', description: { cn: 'blur the input element', en: 'blur the input element' }, type: 'function', param: '' },
    { name: 'clear', description: { cn: 'clear input value', en: 'clear input value' }, type: 'function', param: '' },
    { name: 'focus', description: { cn: 'focus the input element', en: 'focus the input element' }, type: 'function', param: '' },
    { name: 'input', description: { cn: 'HTML input element', en: 'HTML input element' }, type: 'object', param: '' },
    { name: 'ref', description: { cn: 'HTML element, input or textarea', en: 'HTML element, input or textarea' }, type: 'object', param: '' },
    { name: 'resizeTextarea', description: { cn: 'resize textarea', en: 'resize textarea' }, type: 'function', param: '' },
    { name: 'select', description: { cn: 'select the text in input element', en: 'select the text in input element' }, type: 'function', param: '' },
    { name: 'textarea', description: { cn: 'HTML textarea element', en: 'HTML textarea element' }, type: 'object', param: '' },
    { name: 'textareaStyle', description: { cn: 'style of textarea', en: 'style of textarea' }, type: 'object', param: '' },
  ],
  slots: [
    {
      name: 'prefix',
      description: {
        cn: "content as Input prefix, only works when <code>type</code> is not 'textarea'",
        en: "content as Input prefix, only works when <code>type</code> is not 'textarea'",
      },
    },
    {
      name: 'suffix',
      description: {
        cn: "content as Input suffix, only works when <code>type</code> is not 'textarea'",
        en: "content as Input suffix, only works when <code>type</code> is not 'textarea'",
      },
    },
    {
      name: 'prepend',
      description: {
        cn: "content to prepend before Input, only works when <code>type</code> is not 'textarea'",
        en: "content to prepend before Input, only works when <code>type</code> is not 'textarea'",
      },
    },
    {
      name: 'append',
      description: {
        cn: "content to append after Input, only works when <code>type</code> is not 'textarea'",
        en: "content to append after Input, only works when <code>type</code> is not 'textarea'",
      },
    },
  ],
};
export default doc;
