import type { TagDoc } from '@/types/tag-doc'
    const doc: TagDoc.TagDocInstance = {"url":"","attributes":[{"name":"data","description":{"cn":"tree data","en":"tree data"},"type":"array","default":"—","value":[]},{"name":"empty-text","description":{"cn":"text displayed when data is void","en":"text displayed when data is void"},"type":"string","default":"—","value":[]},{"name":"node-key","description":{"cn":"unique identity key name for nodes, its value should be unique across the whole tree","en":"unique identity key name for nodes, its value should be unique across the whole tree"},"type":"string","default":"—","value":[]},{"name":"props","description":{"cn":"configuration options, see the following table","en":"configuration options, see the following table"},"type":"object","default":"—","value":[]},{"name":"render-after-expand","description":{"cn":"whether to render child nodes only after a parent node is expanded for the first time","en":"whether to render child nodes only after a parent node is expanded for the first time"},"type":"boolean","default":"true","value":[]},{"name":"load","description":{"cn":"method for loading subtree data, only works when <code>lazy</code> is true","en":"method for loading subtree data, only works when <code>lazy</code> is true"},"type":"function(node, resolve)","default":"—","value":[]},{"name":"render-content","description":{"cn":"render function for tree node","en":"render function for tree node"},"type":"function(h, <code>{ node, data, store }</code>)","default":"—","value":[]},{"name":"highlight-current","description":{"cn":"whether current node is highlighted","en":"whether current node is highlighted"},"type":"boolean","default":"false","value":[]},{"name":"default-expand-all","description":{"cn":"whether to expand all nodes by default","en":"whether to expand all nodes by default"},"type":"boolean","default":"false","value":[]},{"name":"expand-on-click-node","description":{"cn":"whether to expand or collapse node when clicking on the node, if false, then expand or collapse node only when clicking on the arrow icon.","en":"whether to expand or collapse node when clicking on the node, if false, then expand or collapse node only when clicking on the arrow icon."},"type":"boolean","default":"true","value":[]},{"name":"check-on-click-node","description":{"cn":"whether to check or uncheck node when clicking on the node, if false, the node can only be checked or unchecked by clicking on the checkbox.","en":"whether to check or uncheck node when clicking on the node, if false, the node can only be checked or unchecked by clicking on the checkbox."},"type":"boolean","default":"false","value":[]},{"name":"auto-expand-parent","description":{"cn":"whether to expand father node when a child node is expanded","en":"whether to expand father node when a child node is expanded"},"type":"boolean","default":"true","value":[]},{"name":"default-expanded-keys","description":{"cn":"array of keys of initially expanded nodes","en":"array of keys of initially expanded nodes"},"type":"array","default":"—","value":[]},{"name":"show-checkbox","description":{"cn":"whether node is selectable","en":"whether node is selectable"},"type":"boolean","default":"false","value":[]},{"name":"check-strictly","description":{"cn":"whether checked state of a node not affects its father and child nodes when <code>show-checkbox</code> is <code>true</code>","en":"whether checked state of a node not affects its father and child nodes when <code>show-checkbox</code> is <code>true</code>"},"type":"boolean","default":"false","value":[]},{"name":"default-checked-keys","description":{"cn":"array of keys of initially checked nodes","en":"array of keys of initially checked nodes"},"type":"array","default":"—","value":[]},{"name":"current-node-key","description":{"cn":"key of initially selected node","en":"key of initially selected node"},"type":"string / number","default":"—","value":[]},{"name":"filter-node-method","description":{"cn":"this function will be executed on each node when use filter method. if return <code>false</code>, tree node will be hidden.","en":"this function will be executed on each node when use filter method. if return <code>false</code>, tree node will be hidden."},"type":"function(value, data, node)","default":"—","value":[]},{"name":"accordion","description":{"cn":"whether only one node among the same level can be expanded at one time","en":"whether only one node among the same level can be expanded at one time"},"type":"boolean","default":"false","value":[]},{"name":"indent","description":{"cn":"horizontal indentation of nodes in adjacent levels in pixels","en":"horizontal indentation of nodes in adjacent levels in pixels"},"type":"number","default":"18","value":[]},{"name":"icon","description":{"cn":"custom tree node icon component","en":"custom tree node icon component"},"type":"`string","default":"-","value":[]},{"name":"lazy","description":{"cn":"whether to lazy load leaf node, used with <code>load</code> attribute","en":"whether to lazy load leaf node, used with <code>load</code> attribute"},"type":"boolean","default":"false","value":[]},{"name":"draggable","description":{"cn":"whether enable tree nodes drag and drop","en":"whether enable tree nodes drag and drop"},"type":"boolean","default":"false","value":[]},{"name":"allow-drag","description":{"cn":"this function will be executed before dragging a node. If <code>false</code> is returned, the node can not be dragged","en":"this function will be executed before dragging a node. If <code>false</code> is returned, the node can not be dragged"},"type":"function(node)","default":"—","value":[]},{"name":"allow-drop","description":{"cn":"this function will be executed before the dragging node is dropped. If <code>false</code> is returned, the dragging node can not be dropped at the target node. <code>type</code> has three possible values: 'prev' (inserting the dragging node before the target node), 'inner' (inserting the dragging node to the target node) and 'next' (inserting the dragging node after the target node)","en":"this function will be executed before the dragging node is dropped. If <code>false</code> is returned, the dragging node can not be dropped at the target node. <code>type</code> has three possible values: 'prev' (inserting the dragging node before the target node), 'inner' (inserting the dragging node to the target node) and 'next' (inserting the dragging node after the target node)"},"type":"function(draggingnode, dropnode, type)","default":"—","value":[]}],"events":[{"name":"node-click","description":{"cn":"triggers when a node is clicked","en":"triggers when a node is clicked"},"type":"","tsType":""},{"name":"node-contextmenu","description":{"cn":"triggers when a node is clicked by right button","en":"triggers when a node is clicked by right button"},"type":"","tsType":""},{"name":"check-change","description":{"cn":"triggers when the selected state of the node changes","en":"triggers when the selected state of the node changes"},"type":"","tsType":""},{"name":"check","description":{"cn":"triggers after clicking the checkbox of a node","en":"triggers after clicking the checkbox of a node"},"type":"","tsType":""},{"name":"current-change","description":{"cn":"triggers when current node changes","en":"triggers when current node changes"},"type":"","tsType":""},{"name":"node-expand","description":{"cn":"triggers when current node open","en":"triggers when current node open"},"type":"","tsType":""},{"name":"node-collapse","description":{"cn":"triggers when current node close","en":"triggers when current node close"},"type":"","tsType":""},{"name":"node-drag-start","description":{"cn":"triggers when dragging starts","en":"triggers when dragging starts"},"type":"","tsType":""},{"name":"node-drag-enter","description":{"cn":"triggers when the dragging node enters another node","en":"triggers when the dragging node enters another node"},"type":"","tsType":""},{"name":"node-drag-leave","description":{"cn":"triggers when the dragging node leaves a node","en":"triggers when the dragging node leaves a node"},"type":"","tsType":""},{"name":"node-drag-over","description":{"cn":"triggers when dragging over a node (like mouseover event)","en":"triggers when dragging over a node (like mouseover event)"},"type":"","tsType":""},{"name":"node-drag-end","description":{"cn":"triggers when dragging ends","en":"triggers when dragging ends"},"type":"","tsType":""},{"name":"node-drop","description":{"cn":"triggers after the dragging node is dropped","en":"triggers after the dragging node is dropped"},"type":"","tsType":""}],"exposes":[{"name":"filter","description":{"cn":"filter all tree nodes, filtered nodes will be hidden","en":"filter all tree nodes, filtered nodes will be hidden"},"type":"","tsType":""},{"name":"updateKeyChildren","description":{"cn":"set new data to node, only works when <code>node-key</code> is assigned","en":"set new data to node, only works when <code>node-key</code> is assigned"},"type":"","tsType":""},{"name":"getCheckedNodes","description":{"cn":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently selected array of nodes","en":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently selected array of nodes"},"type":"","tsType":""},{"name":"setCheckedNodes","description":{"cn":"set certain nodes to be checked, only works when <code>node-key</code> is assigned","en":"set certain nodes to be checked, only works when <code>node-key</code> is assigned"},"type":"","tsType":""},{"name":"getCheckedKeys","description":{"cn":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently selected array of node's keys","en":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently selected array of node's keys"},"type":"","tsType":""},{"name":"setCheckedKeys","description":{"cn":"set certain nodes to be checked, only works when <code>node-key</code> is assigned","en":"set certain nodes to be checked, only works when <code>node-key</code> is assigned"},"type":"","tsType":""},{"name":"setChecked","description":{"cn":"set node to be checked or not, only works when <code>node-key</code> is assigned","en":"set node to be checked or not, only works when <code>node-key</code> is assigned"},"type":"","tsType":""},{"name":"getHalfCheckedNodes","description":{"cn":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently half selected array of nodes","en":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently half selected array of nodes"},"type":"","tsType":""},{"name":"getHalfCheckedKeys","description":{"cn":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently half selected array of node's keys","en":"If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently half selected array of node's keys"},"type":"","tsType":""},{"name":"getCurrentKey","description":{"cn":"return the highlight node's key (null if no node is highlighted)","en":"return the highlight node's key (null if no node is highlighted)"},"type":"","tsType":""},{"name":"getCurrentNode","description":{"cn":"return the highlight node's data (null if no node is highlighted)","en":"return the highlight node's data (null if no node is highlighted)"},"type":"","tsType":""},{"name":"setCurrentKey","description":{"cn":"set highlighted node by key, only works when <code>node-key</code> is assigned","en":"set highlighted node by key, only works when <code>node-key</code> is assigned"},"type":"","tsType":""},{"name":"setCurrentNode","description":{"cn":"set highlighted node, only works when <code>node-key</code> is assigned","en":"set highlighted node, only works when <code>node-key</code> is assigned"},"type":"","tsType":""},{"name":"getNode","description":{"cn":"get node by data or key","en":"get node by data or key"},"type":"","tsType":""},{"name":"remove","description":{"cn":"remove a node, only works when node-key is assigned","en":"remove a node, only works when node-key is assigned"},"type":"","tsType":""},{"name":"append","description":{"cn":"append a child node to a given node in the tree","en":"append a child node to a given node in the tree"},"type":"","tsType":""},{"name":"insertBefore","description":{"cn":"insert a node before a given node in the tree","en":"insert a node before a given node in the tree"},"type":"","tsType":""},{"name":"insertAfter","description":{"cn":"insert a node after a given node in the tree","en":"insert a node after a given node in the tree"},"type":"","tsType":""}],"slots":[{"name":"—","description":{"cn":"Custom content for tree nodes. The scope parameter is <code>{ node, data }</code>","en":"Custom content for tree nodes. The scope parameter is <code>{ node, data }</code>"}}]};
    export default doc;
    