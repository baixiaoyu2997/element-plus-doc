import type { TagDoc } from '@/types/tag-doc';
const doc: TagDoc.TagDocInstance = {
  url: 'component/cascader.html',
  attributes: [
    {
      name: 'model-value',
      description: { cn: '选中项绑定值', en: 'binding value' },
      type: ['string', 'array', 'object'],
      default: '—',
      value: [],
    },
    {
      name: 'options',
      description: {
        cn: '选项的数据源， value 和 label 可以通过 CascaderProps 自定义. (Record<string, unknown>[])',
        en: 'data of the options, the key of <code>value</code> and <code>label</code> can be customize by <code>CascaderProps</code>. (Record<string, unknown>[])',
      },
      type: 'object',
      default: '—',
      value: [],
    },
    {
      name: 'props',
      description: {
        cn: '配置选项, 请参阅下面 CascaderProps 表。',
        en: 'configuration options, see the following <code>CascaderProps</code> table.',
      },
      type: 'object',
      default: '—',
      value: [],
    },
    {
      name: 'size',
      description: { cn: '尺寸', en: 'size of input' },
      type: 'enum',
      default: "'default'",
      value: ['large', 'default', 'small'],
    },
    {
      name: 'placeholder',
      description: { cn: '输入框占位文本', en: 'placeholder of input' },
      type: 'string',
      default: '—',
      value: [],
    },
    {
      name: 'disabled',
      description: { cn: '是否禁用', en: 'whether Cascader is disabled' },
      type: 'boolean',
      default: '—',
      value: [],
    },
    {
      name: 'clearable',
      description: { cn: '是否支持清空选项', en: 'whether selected value can be cleared' },
      type: 'boolean',
      default: '—',
      value: [],
    },
    {
      name: 'show-all-levels',
      description: {
        cn: '输入框中是否显示选中值的完整路径',
        en: 'whether to display all levels of the selected value in the input',
      },
      type: 'boolean',
      default: 'true',
      value: [],
    },
    {
      name: 'collapse-tags',
      description: { cn: '多选模式下是否折叠Tag', en: 'whether to collapse tags in multiple selection mode' },
      type: 'boolean',
      default: '—',
      value: [],
    },
    {
      name: 'collapse-tags-tooltip',
      description: {
        cn: '当鼠标悬停于折叠标签的文本时，是否显示所有选中的标签。 要使用此属性，`collapse-tags`属性必须设定为 true',
        en: 'whether show all selected tags when mouse hover text of collapse-tags. To use this, <code>collapse-tags</code> must be true',
      },
      type: 'boolean',
      default: 'false',
      value: [],
    },
    {
      name: 'separator',
      description: { cn: '用于分隔选项的字符', en: 'option label separator' },
      type: 'string',
      default: "' / '",
      value: [],
    },
    {
      name: 'filterable',
      description: { cn: '该选项是否可以被搜索', en: 'whether the options can be searched' },
      type: 'boolean',
      default: '—',
      value: [],
    },
    {
      name: 'filter-method',
      description: {
        cn: '自定义搜索逻辑，第一个参数是`node`，第二个参数是`keyword`，返回的布尔值表示是否保留该选项',
        en: 'customize search logic, the first parameter is <code>node</code>, the second is <code>keyword</code>, and need return a boolean value indicating whether it hits.',
      },
      type: 'function(node: CascaderNode, keyword: string) => boolean',
      default: '—',
      value: [],
    },
    {
      name: 'debounce',
      description: { cn: '搜索关键词正在输入时的去抖延迟，单位为毫秒', en: 'debounce delay when typing filter keyword, in milliseconds' },
      type: 'number',
      default: '300',
      value: [],
    },
    {
      name: 'before-filter',
      description: {
        cn: '过滤函数调用前，所要调用的钩子函数，该函数接收要过滤的值作为参数。 如果该函数的返回值是 `false` 或者是一个被拒绝的 `Promise` ，那么接下来的过滤逻辑便不会执行。',
        en: 'hook function before filtering with the value to be filtered as its parameter. If <code>false</code> is returned or a <code>Promise</code> is returned and then is rejected, filtering will be aborted',
      },
      type: 'function(value: string) => boolean',
      default: '—',
      value: [],
    },
    {
      name: 'popper-class',
      description: { cn: '弹出内容的自定义类名', en: "custom class name for Cascader's dropdown" },
      type: 'string',
      default: "''",
      value: [],
    },
    {
      name: 'teleported',
      description: { cn: '弹层是否使用 teleport', en: 'whether cascader popup is teleported' },
      type: 'boolean',
      default: 'true',
      value: [],
    },
    {
      name: 'popper-append-to-body',
      description: {
        cn: '是否将弹出的内容直接插入到 body 元素。 在弹出内容的边框定位出现问题时，可将该属性设置为 false (已废弃)',
        en: 'whether to append the popper menu to body. If the positioning of the popper is wrong, you can try to set this prop to false (deprecated)',
      },
      type: 'boolean',
      default: 'true',
      value: [],
    },
    {
      name: 'tag-type',
      description: { cn: '标签类型', en: 'tag type' },
      type: 'enum',
      default: "'info'",
      value: ['success', 'info', 'warning', 'danger'],
    },
    {
      name: 'validate-event',
      description: { cn: '输入时是否触发表单的校验', en: 'whether to trigger form validation' },
      type: 'boolean',
      default: 'true',
      value: [],
    },
  ],
  events: [
    {
      name: 'change',
      description: { cn: '当绑定值变化时触发的事件', en: 'triggers when the binding value changes' },
      type: 'function',
      param: '(value: CascaderValue) => void',
    },
    {
      name: 'expand-change',
      description: { cn: '当展开节点发生变化时触发', en: 'triggers when expand option changes' },
      type: 'function',
      param: '(value: CascaderValue) => void',
    },
    {
      name: 'blur',
      description: { cn: '当失去焦点时触发', en: 'triggers when Cascader blurs' },
      type: 'function',
      param: '(event: FocusEvent) => void',
    },
    {
      name: 'focus',
      description: { cn: '当获得焦点时触发', en: 'triggers when Cascader focuses' },
      type: 'function',
      param: '(event: FocusEvent) => void',
    },
    {
      name: 'visible-change',
      description: { cn: '下拉框出现/隐藏时触发', en: 'triggers when the dropdown appears/disappears' },
      type: 'function',
      param: '(value: boolean) => void',
    },
    {
      name: 'remove-tag',
      description: { cn: '在多选模式下，移除Tag时触发', en: 'triggers when remove tag in multiple selection mode' },
      type: 'function',
      param: "(value: CascaderNode['valueByOption']) => void",
    },
  ],
  exposes: [
    {
      name: 'getCheckedNodes',
      description: {
        cn: '获取一个当前选中节点的数组。(仅仅是传单) 是否只返回叶选中的节点，默认是 `false`',
        en: 'get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is <code>false</code>',
      },
      type: 'function',
      param: '(leafOnly: boolean) => CascaderNode[] | undefined',
    },
    {
      name: 'cascaderPanelRef',
      description: { cn: 'cascader 面板的 ref', en: 'cascader panel ref' },
      type: 'object',
      param: 'ComputedRef<any>',
    },
    {
      name: 'togglePopperVisible',
      description: { cn: '切换 popper 可见状态', en: 'toggle the visible type of popper' },
      type: 'function',
      param: '(visible?: boolean) => void',
    },
  ],
  slots: [
    {
      name: 'default',
      description: {
        cn: '自定义备选项的节点内容，分别为当前节点的 Node 对象和数据',
        en: 'the custom content of cascader node, which are current Node object and node data respectively.',
      },
    },
    {
      name: 'empty',
      description: { cn: '无匹配选项时的内容', en: 'content when there is no matched options.' },
    },
  ],
  childAttributes: [
    {
      name: 'CascaderProps',
      list: [
        {
          name: 'expandTrigger',
          description: { cn: '次级菜单的展开方式', en: 'trigger mode of expanding options' },
          type: 'enum',
          default: "'click'",
          value: ['click', 'hover'],
        },
        {
          name: 'multiple',
          description: { cn: '是否多选', en: 'whether multiple selection is enabled' },
          type: 'boolean',
          default: 'false',
          value: [],
        },
        {
          name: 'checkStrictly',
          description: { cn: '是否严格的遵守父子节点不互相关联', en: 'whether checked state of a node not affects its parent and child nodes' },
          type: 'boolean',
          default: 'false',
          value: [],
        },
        {
          name: 'emitPath',
          description: {
            cn: '在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置 false，则只返回该节点的值',
            en: "when checked nodes change, whether to emit an array of node's path, if false, only emit the value of node.",
          },
          type: 'boolean',
          default: 'true',
          value: [],
        },
        {
          name: 'lazy',
          description: { cn: '是否动态加载子节点，需与 `lazyLoad` 方法结合使用', en: 'whether to dynamic load child nodes, use with `lazyload` attribute' },
          type: 'boolean',
          default: 'false',
          value: [],
        },
        {
          name: 'lazyLoad',
          description: { cn: '加载动态数据的方法，仅在 `lazy` 为 true 时有效', en: 'method for loading child nodes data, only works when `lazy` is true' },
          type: 'function(node: Node, resolve: Resolve) => void',
          default: 'true',
          value: [],
        },
        {
          name: 'value',
          description: { cn: '指定选项的值为选项对象的某个属性值', en: "specify which key of node object is used as the node's value" },
          type: 'string',
          default: 'value',
          value: [],
        },
        {
          name: 'label',
          description: { cn: '指定选项标签为选项对象的某个属性值', en: "specify which key of node object is used as the node's label" },
          type: 'string',
          default: 'label',
          value: [],
        },
        {
          name: 'children',
          description: { cn: '指定选项的子选项为选项对象的某个属性值', en: "specify which key of node object is used as the node's children" },
          type: 'string',
          default: 'children',
          value: [],
        },
        {
          name: 'disabled',
          description: { cn: '指定选项的禁用为选项对象的某个属性值', en: "specify which key of node object is used as the node's disabled" },
          type: 'string',
          default: 'disabled',
          value: [],
        },
        {
          name: 'leaf',
          description: { cn: '指定选项的叶子节点的标志位为选项对象的某个属性值', en: "specify which key of node object is used as the node's leaf field" },
          type: 'string',
          default: 'leaf',
          value: [],
        },
        {
          name: 'hoverThreshold',
          description: { cn: 'hover 时展开菜单的灵敏度阈值', en: 'hover threshold of expanding options' },
          type: 'number',
          default: '500',
          value: [],
        },
      ],
    },
  ],
};
export default doc;
